1、第6章监听器源码地址：https://testerhome.com/topics/8134?locale=zh-TW
2、测试报告ExtentReports：http://extentreports.com/
3、moco框架地址：https://repo1.maven.org/maven2/com/github/dreamhead/moco-runner/0.11.0/（选择最大的那个，含standalone的jar包）
    3.1、解决moco模拟请求返回中文乱码问题:
            在response中添加设置编码格式为“GBK”，
            "response":{
                  "text":"第一个moco框架demo",
                  "headers":{
                    "Content-Type":"text/html;charset=gbk"
                  }
                }
    3.2、注意带参数的get请求和post请求参数前面的字段，get是"queries"，post是"forms"
4、http协议接口：
  4.1、请求头信息字段含义：
    Accept:浏览器告诉服务器它所支持的数据类型；
    Accept-Charset:浏览器告诉服务器它所采用的字符集；
    Accept-Encoding:浏览器告诉服务器它所支持的压缩格式；
    Accept-Language:浏览器所采用的语言；
    Host：浏览器想访问服务器哪台主机；
    if-Modified-Since:浏览器缓存数据的时间；
    Referer:浏览器是从哪个网页点过来的（防盗链）；
    User-Agent:浏览器所使用的浏览器类型、版本等信息；
    Date:浏览器什么时间访问的。
  4.2、响应头信息字段含义：
    Location:告诉浏览器去找谁，配合302状态码使用；
    Server:告诉浏览器服务器的类型；
    Content-Encoding:告诉浏览器，服务器回送数据采用的压缩格式；
    Content-Type：服务器回送的数据类型；
    Last-Modified：数据的最后修改时间；
    Refresh：用于控制浏览器定时刷新；
    Content-Disposition:告诉浏览器需要以下载方式打开回送的数据；
    Transfer-Encoding:告诉浏览器数据是以分块形式回送的。
  4.3、Cookie与Session的区别点：
    (1)、cookie在客户端的头信息中；
    (2)、session在服务端存储，文件、数据库等都可以；
    (3)、一般来说，session的验证需要cookie带一个字段来表示这个是哪一个session；
    (4)、所以当客户端禁用cookie时，session将失效
  4.4、Cookie的总结：
     (1)、cookie就是一小段文本信息，内容是自定义的；
     (2)、cookie的格式为key:value；key:value；（测试时，要清楚每个key和value的意思，怎么生成的）
     (3)cookie的值由服务端生成，客户端保存。
5、HTTPClient官网地址:hc.apache.org
6、下载插件：lombok
7、logback模板地址：https://www.cnblogs.com/light-zhang/p/8744647.html
8、第12章：测试代码打包配置：
        Step1:
            <!--    打包配置-->
                <build>
                    <plugins>
                        <plugin>
                            <groupId>org.apache.maven.plugins</groupId>
                            <artifactId>maven-surefire-plugin</artifactId>
                            <version>2.12.4</version>
                            <configuration>
                                <suiteXmlFiles>
                                <!--                        其他项目引用时给成对应的testng.xml的路径-->
                                    ./src/main/resources/testng.xml
                                </suiteXmlFiles>
                            </configuration>
                        </plugin>
                    </plugins>
                </build>
        Step 2:
          打包配置添加好后，在Terminal窗口中，进入Chapter12的目录，输入命令：mvn clean package，这个命令会把代码打成一个jar包

   第13章：接口代码打包配置：
        Step 1：
            <!--    打包配置-->
                <build>
                    <plugins>
                        <plugin>
                            <groupId>org.apache.maven.plugins</groupId>
                            <artifactId>maven-compiler-plugin</artifactId>
                            <configuration>
            <!--                    指定使用的JDK版本-->
                                <source>1.8</source>
                                <target>1.8</target>
                            </configuration>
                        </plugin>
                        <plugin>
                            <groupId>org.springframework.boot</groupId>
                            <artifactId>spring-boot-maven-plugin</artifactId>
                            <configuration>
            <!--                    程序的入口：其他项目用时需要改变，其他内容不用改-->
                                <mainClass>com.course.Application</mainClass>
                            </configuration>
                            <executions>
                                <execution>
                                    <goals>
                                        <goal>repackage</goal>
                                    </goals>
                                </execution>
                            </executions>
                        </plugin>
                        <plugin>
                            <artifactId>maven-compiler-plugin</artifactId>
                            <configuration>
                                <source>1.8</source>
                                <target>1.8</target>
                                <encoding>UTF-8</encoding>
                                <compilerArguments>
                                    <extdirs>${project.basedir}/lib</extdirs>
                                </compilerArguments>
                            </configuration>
                        </plugin>
                    </plugins>
                </build>
        Step 2:
            打包配置添加好后，在Terminal窗口中，进入Chapter12的目录，输入命令：mvn clean package，这个命令会把代码打成一个jar包
        Step 3:
           在target目录下可以找到生成的jar包，在Terminal中使用命令：java -jar jar包的名字，即可启动程序。